# 함수 선언 def 이름()
# 함수호출 : 이름()
# 함수선언 매개변수 갯수는 맞춰야 함 : def 이름(매개변수) -> 이름 (매개변수)
# 리턴 결과값을 받지 않아도 되지만, 갯수는 맞춰야 함
# 함수 내의 변수는 지역변수여서, 함수가 종료되면 사라짐.
# 함수 내에 변경된 변수값을 전역변수에 반영하고 싶으면 return으로 돌려줘야 함
# 함수내 glbal 이라고 하면 전역변수에 선언함. 거의 안씀
# 매개변수로 리스트, 딕셔너리를 사용하는 경우 return사용 필요 없음

def cal(v1,sum): #지역변수
    sum =500 #지역변수
    v1 = 200 
    return v1, sum

sum = 10 #전역변수
v1 =100 #전역변수
cal(v1, sum)
print(v1)
print(sum)
# -----------------------------------------------------
def func1():
    a = 100 #지역변수
    print("func1 a = ", a)
    # 지역변수 값을 전역변수에 적용시키는 방법
    # 코드 추가하기
    return a
    
def func2():
    print("func1 b = ", a+10)
    
a = 20
a = func1()
func2()
print("결과값 : ", a)
# ------------------------------------------------------ 위 아래 비교하기

def func1():
    a = 100 #지역변수
    print("func1 a = ", a)
    # 지역변수 값을 전역변수에 적용시키는 방법
    # 코드 추가하기

    
def func2():
    print("func1 b = ", a+10)
    
a = 20
func1()
func2()
print("결과값 : ", a)
# ------------------------------------------
def func1():
    global a  #전역변수 값을 들고오고 return도 가지고 옴 (a=20도 바뀜 100으로)
    a = 100 #지역변수
    print("func1 a = ", a)
    # 지역변수 값을 전역변수에 적용시키는 방법
    # 코드 추가하기  

def func2():
    print("func1 b = ", a+10)
    
a = 20
func1()
func2()
print("결과값 : ", a)






